---
<<<<<<< HEAD
on:
=======
"on":
>>>>>>> upstream/main
  workflow_call:

permissions:
  contents: read

concurrency:
  group: integration-${{ github.ref }}
  cancel-in-progress: true

env:
<<<<<<< HEAD
  CHEF_TEST_KITCHEN_ENTERPRISE: true
=======
  BUNDLE_WITHOUT: integration
>>>>>>> upstream/main
  machine_user: test_user
  machine_pass: Pass@word1
  SPEC_OPTS: --format progress

jobs:
  dokken:
    env:
      KITCHEN_LOCAL_YAML: kitchen.dokken.yml
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        ruby: ["3.1", "3.4"]
    steps:
      - uses: actions/checkout@v5
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ matrix.ruby }}
          bundler-cache: true
      - name: Setup Machine
        run: |
          bundle config set --local with 'integration'
          bundle install
      - name: Verify Dokken
        run: bundle exec kitchen verify

  vagrant:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
<<<<<<< HEAD
        ruby: ["3.1", "3.4"]
=======
        ruby: ["3.4"]
>>>>>>> upstream/main
    steps:
      - name: Install VirtualBox
        run: |
          wget -O- https://apt.releases.hashicorp.com/gpg | gpg --dearmor | sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg
          echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
          sudo apt-get update
<<<<<<< HEAD
          sudo apt-get install -y software-properties-common libarchive-tools vagrant virtualbox
=======
          sudo apt-get install -y libarchive-tools virtualbox
>>>>>>> upstream/main
      - uses: actions/checkout@v5
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ matrix.ruby }}
          bundler-cache: true
<<<<<<< HEAD
      - name: Verify Vagrant
        run: |
=======
      - name: Setup Machine
        run: |
          bundle config set --local with 'integration'
          bundle add vagrant --version ">= 2.4.4"
          bundle install
          bundle binstubs vagrant
          export PATH="$(pwd)/bin:$PATH"
          which vagrant
          vagrant -v
      - name: Verify Vagrant
        run: |
          export PATH="$(pwd)/bin:$PATH"
>>>>>>> upstream/main
          bundle exec kitchen verify almalinux-9

  macos:
    env:
      machine_port: 22
<<<<<<< HEAD
      KITCHEN_LOCAL_YAML: kitchen.proxy.yml
=======
      KITCHEN_LOCAL_YAML: kitchen.${{ matrix.kitchen_yaml }}.yml
>>>>>>> upstream/main
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        ruby: ["3.1", "3.4"]
<<<<<<< HEAD
=======
        kitchen_yaml: ["dummy", "exec", "proxy", "shell"]
>>>>>>> upstream/main
    steps:
      - uses: actions/checkout@v5
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ matrix.ruby }}
          bundler-cache: true
      - name: Setup Machine
        run: |
          sudo dscl . -create /Users/${{ env.machine_user }}
          sudo dscl . -create /Users/${{ env.machine_user }} UserShell /bin/bash
          sudo dscl . -create /Users/${{ env.machine_user }} RealName "${{ env.machine_user }}"
          sudo dscl . -create /Users/${{ env.machine_user }} UniqueID 1001
          sudo dscl . -create /Users/${{ env.machine_user }} PrimaryGroupID 80
          sudo dscl . -create /Users/${{ env.machine_user }} NFSHomeDirectory /Users/${{ env.machine_user }}
          sudo dscl . -passwd /Users/${{ env.machine_user }} ${{ env.machine_pass }}
          sudo createhomedir -c -u ${{ env.machine_user }}
          echo "${{ env.machine_user }} ALL=(ALL) NOPASSWD:ALL" | sudo tee -a /etc/sudoers
<<<<<<< HEAD
          bundle config set --local with 'integration'
          bundle install
=======
>>>>>>> upstream/main
      - name: Verify macOS
        run: bundle exec kitchen verify localhost

  windows:
    env:
      machine_port: 5985
<<<<<<< HEAD
      KITCHEN_LOCAL_YAML: kitchen.proxy.yml
=======
      KITCHEN_LOCAL_YAML: kitchen.${{ matrix.kitchen_yaml }}.yml
>>>>>>> upstream/main
    runs-on: windows-latest
    timeout-minutes: 600
    strategy:
      fail-fast: false
      matrix:
        ruby: ["3.1", "3.4"]
        kitchen_yaml: ["dummy", "exec", "proxy", "shell"]
    steps:
      - uses: actions/checkout@v5
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ matrix.ruby }}
          bundler-cache: true
      - name: Setup Machine
        run: |
          winrm.cmd quickconfig -q
          net user /add ${{ env.machine_user }} ${{ env.machine_pass }}
          net localgroup administrators ${{ env.machine_user }} /add
      - name: Verify Windows
        run: bundle exec kitchen verify windows-winrm

  linux:
    env:
      machine_port: 22
      KITCHEN_LOCAL_YAML: kitchen.${{ matrix.kitchen_yaml }}.yml
    runs-on: ubuntu-latest
    timeout-minutes: 600
    strategy:
      fail-fast: false
      matrix:
        ruby: ["3.1", "3.4"]
        kitchen_yaml: ["dummy", "exec", "proxy", "shell"]
    steps:
      - uses: actions/checkout@v5
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ matrix.ruby }}
          bundler-cache: true
      - name: Setup Machine
        run: |
          sudo useradd -m ${{ env.machine_user }}
          echo "${{ env.machine_user }}:${{ env.machine_pass }}" | sudo chpasswd
          echo "${{ env.machine_user }} ALL=(ALL) NOPASSWD:ALL" | sudo tee -a /etc/sudoers
      - name: Verify Linux
        run: |
          bundle exec kitchen verify localhost

  windows-fips-ssh:
    env:
      machine_port: 22
      KITCHEN_LOCAL_YAML: kitchen.exec.yml
    runs-on: windows-latest
    timeout-minutes: 600
    strategy:
      fail-fast: false
      matrix:
        ruby: ["3.1", "3.4"]
        kitchen_yaml: ["dummy", "exec", "proxy", "shell"]
    steps:
      - uses: actions/checkout@v5
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ matrix.ruby }}
          bundler-cache: true
      - name: 'Enable FIPS via windows registry'
        run: |
          $OldErrorActionPreference = $ErrorActionPreference
          $ErrorActionPreference = "stop"
          $KeyPath = "HKLM:\SYSTEM\CurrentControlSet\Control\Lsa\FipsAlgorithmPolicy"
          $ValueName = "Enabled"
          $ValueData = "1"
          try{
              Get-ItemProperty -Path $KeyPath -Name $valueName -ErrorAction Stop
              New-ItemProperty -Path $KeyPath -Name $ValueName -Value $ValueData -PropertyType DWord -Force
          }
          catch [System.Management.Automation.PSArgumentException] {
              New-ItemProperty -Path $KeyPath -Name $ValueName -Value $ValueData -PropertyType DWord -Force
          }
          catch [System.Management.Automation.ItemNotFoundException]
          {
              New-Item -Path $KeyPath -Force
              New-ItemProperty -Path $KeyPath -Name $ValueName -Value $ValueData -PropertyType DWord -Force
          }
          Finally
          {
              $ErrorActionPreference = $OldErrorActionPreference
          }
          if (-not $?) { throw "Failed to enable FIPS mode." }
      - name: Setup Machine
        run: |
          Add-WindowsCapability -Online -Name OpenSSH.Server
          Start-Service -Name "sshd"
          # Ensure the firewall rule for OpenSSH Server is enabled (it should be created automatically during installation)
          if (!(Get-NetFirewallRule -Name "OpenSSH-Server-In-TCP" -ErrorAction SilentlyContinue)) {
              Write-Host "Firewall Rule 'OpenSSH-Server-In-TCP' does not exist, creating it..."
              New-NetFirewallRule -Name "OpenSSH-Server-In-TCP" -DisplayName "OpenSSH Server (sshd)" -Enabled True -Direction Inbound -Protocol TCP -LocalPort 22 -Action Allow
          } else {
              Write-Host "Firewall Rule 'OpenSSH-Server-In-TCP' already exists."
              # Optionally, ensure it's enabled
              Set-NetFirewallRule -Name "OpenSSH-Server-In-TCP" -Enabled True
          }
          net user /add ${{ env.machine_user }} ${{ env.machine_pass }}
          net localgroup administrators ${{ env.machine_user }} /add
      - name: Verify Windows FIPS SSH
        run: bundle exec kitchen verify windows-fips-ssh -l debug
